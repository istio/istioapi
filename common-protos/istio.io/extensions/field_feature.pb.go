// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: istio.io/extensions/field_feature.proto

package extensions

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// These options should be used during schema definition,
// applying them to some of the fields in protobuf
type IstioFeature struct {
	// Types that are valid to be assigned to XStatus:
	//	*IstioFeature_Status
	XStatus isIstioFeature_XStatus `protobuf_oneof:"_status"`
	// Types that are valid to be assigned to XName:
	//	*IstioFeature_Name
	XName isIstioFeature_XName `protobuf_oneof:"_name"`
	// Types that are valid to be assigned to XId:
	//	*IstioFeature_Id
	XId                  isIstioFeature_XId `protobuf_oneof:"_id"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *IstioFeature) Reset()         { *m = IstioFeature{} }
func (m *IstioFeature) String() string { return proto.CompactTextString(m) }
func (*IstioFeature) ProtoMessage()    {}
func (*IstioFeature) Descriptor() ([]byte, []int) {
	return fileDescriptor_dccd704139895832, []int{0}
}
func (m *IstioFeature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IstioFeature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IstioFeature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IstioFeature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IstioFeature.Merge(m, src)
}
func (m *IstioFeature) XXX_Size() int {
	return m.Size()
}
func (m *IstioFeature) XXX_DiscardUnknown() {
	xxx_messageInfo_IstioFeature.DiscardUnknown(m)
}

var xxx_messageInfo_IstioFeature proto.InternalMessageInfo

type isIstioFeature_XStatus interface {
	isIstioFeature_XStatus()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isIstioFeature_XName interface {
	isIstioFeature_XName()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isIstioFeature_XId interface {
	isIstioFeature_XId()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IstioFeature_Status struct {
	Status string `protobuf:"bytes,1,opt,name=status,proto3,oneof" json:"status,omitempty"`
}
type IstioFeature_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
}
type IstioFeature_Id struct {
	Id string `protobuf:"bytes,3,opt,name=id,proto3,oneof" json:"id,omitempty"`
}

func (*IstioFeature_Status) isIstioFeature_XStatus() {}
func (*IstioFeature_Name) isIstioFeature_XName()     {}
func (*IstioFeature_Id) isIstioFeature_XId()         {}

func (m *IstioFeature) GetXStatus() isIstioFeature_XStatus {
	if m != nil {
		return m.XStatus
	}
	return nil
}
func (m *IstioFeature) GetXName() isIstioFeature_XName {
	if m != nil {
		return m.XName
	}
	return nil
}
func (m *IstioFeature) GetXId() isIstioFeature_XId {
	if m != nil {
		return m.XId
	}
	return nil
}

func (m *IstioFeature) GetStatus() string {
	if x, ok := m.GetXStatus().(*IstioFeature_Status); ok {
		return x.Status
	}
	return ""
}

func (m *IstioFeature) GetName() string {
	if x, ok := m.GetXName().(*IstioFeature_Name); ok {
		return x.Name
	}
	return ""
}

func (m *IstioFeature) GetId() string {
	if x, ok := m.GetXId().(*IstioFeature_Id); ok {
		return x.Id
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IstioFeature) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IstioFeature_Status)(nil),
		(*IstioFeature_Name)(nil),
		(*IstioFeature_Id)(nil),
	}
}

var E_Feature = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*IstioFeature)(nil),
	Field:         1300,
	Name:          "istio.extensions.feature",
	Tag:           "bytes,1300,opt,name=feature",
	Filename:      "istio.io/extensions/field_feature.proto",
}

func init() {
	proto.RegisterType((*IstioFeature)(nil), "istio.extensions.IstioFeature")
	proto.RegisterExtension(E_Feature)
}

func init() {
	proto.RegisterFile("istio.io/extensions/field_feature.proto", fileDescriptor_dccd704139895832)
}

var fileDescriptor_dccd704139895832 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xcf, 0x2c, 0x2e, 0xc9,
	0xcc, 0xd7, 0xcb, 0xcc, 0xd7, 0x4f, 0xad, 0x28, 0x49, 0xcd, 0x2b, 0xce, 0xcc, 0xcf, 0x2b, 0xd6,
	0x4f, 0xcb, 0x4c, 0xcd, 0x49, 0x89, 0x4f, 0x4b, 0x4d, 0x2c, 0x29, 0x2d, 0x4a, 0xd5, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x12, 0x80, 0x28, 0x44, 0xa8, 0x92, 0x52, 0x48, 0xcf, 0xcf, 0x4f, 0xcf,
	0x49, 0xd5, 0x07, 0xcb, 0x27, 0x95, 0xa6, 0xe9, 0xa7, 0xa4, 0x16, 0x27, 0x17, 0x65, 0x16, 0x94,
	0xe4, 0x17, 0x41, 0xf4, 0x28, 0x95, 0x70, 0xf1, 0x78, 0x82, 0x74, 0xb9, 0x41, 0x4c, 0x12, 0x92,
	0xe6, 0x62, 0x2b, 0x2e, 0x49, 0x2c, 0x29, 0x2d, 0x96, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0xf4, 0x60,
	0x08, 0x82, 0xf2, 0x3b, 0x18, 0x19, 0x85, 0xc4, 0xb9, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x98,
	0xc0, 0x52, 0x8c, 0x41, 0x60, 0x1e, 0x48, 0x42, 0x98, 0x8b, 0x29, 0x33, 0x45, 0x82, 0x19, 0x2c,
	0xcc, 0x14, 0xc4, 0x94, 0x99, 0xd2, 0xc1, 0xc8, 0xe8, 0xc4, 0xc9, 0xc5, 0x1e, 0x0f, 0xd1, 0xeb,
	0xc4, 0xce, 0xc5, 0x1a, 0x0f, 0x52, 0xeb, 0xc4, 0xca, 0xc5, 0x1c, 0x9f, 0x99, 0x62, 0x15, 0xc1,
	0xc5, 0x0e, 0x75, 0xba, 0x90, 0xac, 0x1e, 0xc4, 0x8d, 0x7a, 0x30, 0x37, 0xea, 0xb9, 0x81, 0xbc,
	0xe6, 0x5f, 0x50, 0x02, 0xf2, 0x81, 0xc4, 0x14, 0x2e, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x39, 0x3d,
	0x74, 0xbf, 0xe9, 0x21, 0x3b, 0x3b, 0x08, 0x66, 0x9c, 0x93, 0xde, 0x89, 0x47, 0x72, 0x8c, 0x17,
	0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x18, 0xa5, 0x00, 0x0f, 0xba, 0xc4, 0x82, 0x4c, 0x7d,
	0x2c, 0xe1, 0x98, 0xc4, 0x06, 0xb6, 0xd6, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x58, 0xd4, 0x0f,
	0x3a, 0x65, 0x01, 0x00, 0x00,
}

func (m *IstioFeature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IstioFeature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IstioFeature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.XId != nil {
		{
			size := m.XId.Size()
			i -= size
			if _, err := m.XId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XName != nil {
		{
			size := m.XName.Size()
			i -= size
			if _, err := m.XName.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XStatus != nil {
		{
			size := m.XStatus.Size()
			i -= size
			if _, err := m.XStatus.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *IstioFeature_Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IstioFeature_Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintFieldFeature(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *IstioFeature_Name) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IstioFeature_Name) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintFieldFeature(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *IstioFeature_Id) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IstioFeature_Id) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Id)
	copy(dAtA[i:], m.Id)
	i = encodeVarintFieldFeature(dAtA, i, uint64(len(m.Id)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func encodeVarintFieldFeature(dAtA []byte, offset int, v uint64) int {
	offset -= sovFieldFeature(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IstioFeature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XStatus != nil {
		n += m.XStatus.Size()
	}
	if m.XName != nil {
		n += m.XName.Size()
	}
	if m.XId != nil {
		n += m.XId.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IstioFeature_Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	n += 1 + l + sovFieldFeature(uint64(l))
	return n
}
func (m *IstioFeature_Name) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovFieldFeature(uint64(l))
	return n
}
func (m *IstioFeature_Id) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	n += 1 + l + sovFieldFeature(uint64(l))
	return n
}

func sovFieldFeature(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFieldFeature(x uint64) (n int) {
	return sovFieldFeature(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IstioFeature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFieldFeature
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IstioFeature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IstioFeature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFeature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFieldFeature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFieldFeature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XStatus = &IstioFeature_Status{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFeature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFieldFeature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFieldFeature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XName = &IstioFeature_Name{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFeature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFieldFeature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFieldFeature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XId = &IstioFeature_Id{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFieldFeature(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFieldFeature
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFieldFeature(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFieldFeature
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFieldFeature
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFieldFeature
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFieldFeature
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFieldFeature
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFieldFeature
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFieldFeature        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFieldFeature          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFieldFeature = fmt.Errorf("proto: unexpected end of group")
)
